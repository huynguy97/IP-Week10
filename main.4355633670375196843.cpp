#include <iostream>
#include <vector>
#include <cassert>
#include <cmath>

using namespace std;

//                                       
//                                 

vector<int> int_vector =        {150,343,184,328,-459,721,947,-230,-673,-409,-317,331,111,-299,-740,-341,802,10,-999,-538,710,636,41,-293,-95,-572,822,767,
                                -909,97,-816,661,-987,99,849,703,-79,37,877,739,223,168,-748,-728,342,-158,341,-205,-972,-154,-562,927,418,852,-284,382,
                                208,-932,326,-484,-596,-771,450,-291,-561,-509,121,-246,184,390,389,372,-166,297,935,37,104,569,391,-934,-743,604,225,
                                -391,-910,-704,-878,-248,-891,444,758,209,-346,-544,-381,642,704,137,819,262,615,508,-621,-941,-99,810,-478,-742,332,497,
                                306,521,-645,37,-280,-524,-630,-484,255,381,383,-208,-36,571,-147,-441,-603,868,-549,-409,-587,159,-230,5,-280,-310,167,
                                -526,-729,317,992,-754,28,-710,476,724,-570,193,522,-110,232,37,78,566,-193,-184,-349,-62,441,-735,-390,-117,-64,-473,382,
                                -863,733,714,-442,-689,502,259,689,-144,25,-335,-619,620,-91,865,393,517,61,-579,429,206,336,-941,76,37,-468,112,-690,
                                -621,-121,-29,940,-987,188,149,-66,-950,-371,145,-999,27,296,-62,-652,-963,597,-481,83,602,-314,-633,891,343,585,-824,
                                -365,239,-112,782,-728,174,263,37,919,-280,162,-34,-416,-424,-802,-705,-929,-106,-863,493,-254,23,704,-252,-787,-237,941,
                                372,-113,982,-89,636,-351,650,-561,858,-804,843,239,-860,-481,-279,104,-375,-667,37,-890,-274,458,-814,-399,-830,168,473,
                                966,-446,126,-965,385,-78,290,51,783,642,-684,565,57,453,55,-746,445,-448,-576,172,-622,-378,833,533,-323,606,782,135,974,
                                37,825,568,-140,-68,-18,649,448,-463,-346,9,157,-790,-663,-738,564,221,301,148,-314,159,481,826,-861,-413,-819,853,120,
                                220,-438,426,870,506,798,477,608,-102,-927,37,-257,364,-986,-713,-226,551,-568,75,759,-3,440,642,976,-301,-450,174,919,
                                -487,-478,-132,-598,-735,-8,-976,9,810,-247,363,-779,-45,945,-782,179,217,-381,362,-843,37,-8,694,112,972,-105,-518,-453,
                                622,892,-809,838,-195,365,-745,689,737,-576,954,82,722,692,468,617,40,819,591,211,51,8,259,-485,801,464,-635,949,848,-177,
                                37,986,-515,397,326,585,816,-931,-149,765,232,-976,312,310,-297,989,-589,420,-214,-816,-233,-59,-958,749,-943,-528,512,
                                -288,-463,-857,570,895,-237,157,-779,794,937,-596,37,539,198,64,494,235,-341,1,837,866,-994,220,-28,611,-560,-405,674,
                                -456,358,-119,-894,838,135,-859,0,700,-186,645,454,-334,394,-306,-656,-182,917,674,-584,76,37,903,-661,-476,-705,337,-765,
                                -580,-576,-5,163,-407,-57,-425,638,12,-642,54,-983,-449,587,-370,-719,-237,210,-627,959,-185,-238,811,177,-575,66,376,
                                -741,-428,580,475,37,-161,-789,672,436,44,-653,-809,-610,623,3,846,88,-844,482,11,328,-231,26,-164,704,-786,881,460,-801,
                                -220,-82,-36,696,-908,464,-182,-862,987,53,150,-24,667,37,731,-284,451,-635,747,543,680,170,-292,-489,-470,-820,935,402,
                                -46,399,-908,757,581,-766,-825,623,-463,-249,-132,389,258,634,-526,-498,174,-276,72,295,-825,-915,691,37,-2,-556,89,-80,
                                -421,-522,547,431,210,-54,911,803,584,599,-194,821,863,-890,-705,-118,254,747,916,202,581,-574,323,620,747,798,-276,-779,
                                -652,-275,148,-152,471,37,551,528,-785,282,-310,7,-156,-640,-711,-993,875,128,140,-110,-11,490,542,942,-462,598,972,-236,
                                -608,393,289,547,-592,740,308,966,-110,465,-44,169,105,267,338,37,-961,-527,-900,124,-32,-473,-217,-174,860,-235,986,-128,
                                -53,-427,586,-103,965,-546,367,-16,16,-224,633,-825,468,537,-137,740,230,326,-346,208,-668,-762,60,-806,357,37,-938,-322,
                                222,-898,-355,-665,-38,549,-44,-893,503,237,-889,626,112,512,-615,-7,909,127,420,969,440,-144,410,364,-956,-159,93,501,
                                261,-103,350,-70,284,-568,9,37,-341,-578,-525,-306,304,920,-84,927,561,-773,472,662,-738,896,443,-162,785,-442,228,207,
                                -420,-527,706,184,-915,-170,-610,-875,-935,-357,841,-314,-520,-787,-212,-494,125,37,-211,-32,-539,667,992,-876,923,955,
                                -741,-519,999,-939,38,-430,-408,196,337,-206,-847,-995,78,-390,988,491,563,-947,-313,53,-622,530,739,967,321,368,776,760,
                                -605,37,-496,-655,-500,51,822,-881,-139,-343,-409,-775,-279,-106,563,-299,-481,-432,-872,905,-864,620,-915,523,-982,-493,
                                576,356,-4,-825,-640,-956,-570,-521,658,-52,318,172,194,37,-806,-863,-665,-412,-697,-448,883,-867,852,202,26,41,-832,-715,
                                -608,-526,-382,575,250,-743,-414,-884,-557,192,452,-816,105,180,407,509,22,768,956,-866,941,-755,-187,37,813,-752,-838,
                                -832,386,361,28,701,177,793,356,-323,851,-874,-502,-239,-711,-220,398,950,-346,567,-867,816,-691,480,976,-704,889,328,99,
                                -246,-630,-834,-740,-930,-701,37,518,56,-807,-980,817,675,-32,-230,679,-705,812,430,-570,638,539,903,-773,-273,-218,652,
                                876,-914,-726,515,-461,-639,265,927,714,-845,206,405,-630,221,-941,-527,-847,37,370,-781,-168,565,-490,-928,15,115,340,
                                -512,-963,273,-809,705,-727,749,76,547,891,-156,141,-451,764,-614,-719,-145,-62,-989,-294,-919,22,601,-621,-395,-804,593,
                                -217,37,973,496,289,265,-656,177,502,821,673,-746,-419,940,759,-911,718,822,-572,198,138,-863,-427,276,973,-204,5,729,774,
                                652,-937,-854,798,153,-742,455,474,-166,760,37,627,736,18,26,-338,-963,-658,-592,-519,-399,688,-785,294,782,389,427,407,
                                431,606,-859,138,-279,720,775,-190,-476,-193,983,-866,861,310,902,107,656,572,58,658,37,-998,-270,975,-484,42,-847,168,
                                676,973,511,811,478,250,-1,802,272,-906,-874,528,-159,-863,65,957,-64,609,-23,-690,937,-490,361,-57,-787,-108,252,751,480,
                                -948,37,-723,-575,180,-366,-467,-532,171,394,-976,405,801,570,-562,597,784,965,-855,-972,406,378,791,-744,-164,493,-750,
                                449,-902,216,-75,-511,813,635,-160,-704,625,-919,266,37,-484,-707,272,717,-188,-665,-559,-203,961,75,709,472,-844,380,
                                -181,973,-654,897,677,119,-943,130,-511,-552,-823,-525,-501,-702,-680,-570,966,-437,-68,-767,590,-943,657,37,377,-120,
                                -618,-501,673,813,-593,-962,75,-872,436,-541,-451,501,39,-223,-1000,715,-866,-759,-867,-326,988,393,988,-390,429,-122,
                                -808,-614,847,636,697,26,-173,736,-872,37,-247,-157,-576,229,937,-298,-753,-206,-249,-367,-84,-545,-656,-496,493,-301,831,
                                -600,-939,-899,-651,703,-594,516,579,278,-798,475,125,-32,-548,627,98,699,702,-373,777,37,-526,541,-203,775,480,660,-456,
                                30,-307,-812,352,-497,698,-242,-169,-342,-510,735,-502,-685,912,425,-304,428,-886,785,805,-466,-746,-208,-609,-42,771,94,
                                922,667,-678,37,-205,745,-788,-205,-327,-667,670,-848,589,-442,-796,-442,349,56,-22,423,-688,-78,-34,495,203,-445,-233,
                                -728,-165,571,610,827,742,-350,338,-186,132,221,-804,334,-731,37,269,-659,-277,-853,915,872,-967,717,186,427,659,-183,
                                -453,760,203,-192,-18,990,441,220,-212,450,-687,-599,734,-280,-142,316,739,68,761,127,-366,-480,910,438,-460,37,190,978,
                                682,-426,290,392,-684,832,-819,-824,548,781,-313,755,-857,-634,311,-57,-551,-593,-189,-324,-367,-331,-887,-332,-854,-653,
                                751,449,515}; //             

void display_vector(vector<int>& data, int number)
{   //               
    assert(number == 0 || number == 1);
    //                
    /*
                                                                                                                   
    */
    cout << "\n\nDisplaying vector content:\n";
    if (number == 1)
    {
        int j = 0;
        for (int i = 0; i < data.size(); i++)
        {
            if (i == pow(2,j) - 1)
            {
                cout << '\n';
                j++;
            }
            cout << data[i] << ", ";
        }
    }
    else if (number == 0)
    {
        for (int i = 0; i < data.size(); i++)
        {
            cout << data[i] << ", ";
        }
    }
}

bool check_heap(vector<int>& data)
{   //               
    assert(true);
    //                
    /*
                                                                                     
    */
    for (int i = 1; i < data.size(); i++)
    {
        if (data[i] > data[((i - 1) / 2)])
        {
            return false;
        }
    }
    return true;
}

bool check_sorted(vector<int>& data)
{   //               
    assert(true);
    //                
    /*
                                                                                     
    */
    for (int i = 0; i < data.size() - 1; i++)
    {
        if (data[i] > data[i+1])
        {
            return false;
        }
    }
    return true;
}

void _swap(vector<int>& data, int a, int b)
{   //               
    assert(a < data.size() && b < data.size());
    //                
    /*
                                                                                    
    */
    int temp_a = data[a];
    data[a] = data[b];
    data[b] = temp_a;
}

void push_up(vector<int>& data, int child_index)
{   //               
    assert(child_index > 0 && child_index < data.size());
    //                
    /*
                                                                                                                                                         
                 
    */
    int parent_index = (child_index - 1) / 2;
    while (data[child_index] > data[parent_index] && parent_index >= 0)
    {
        _swap(data, parent_index, child_index);
        child_index = parent_index;
        parent_index = (child_index - 1) / 2;
        //                                                        
    }
}

void build_heap(vector<int>& data)
{   //               
    assert(true);
    //                
    /*
                                                        
    */
    int vector_size = data.size();
    for (int i = 1; i < vector_size; i++)
    {
        if (data[((i - 1) / 2)] < data[i])
        {
            push_up(data, i);
        }
    }
}

void push_down(vector<int>& data, int last_element)
{   //               
    assert(last_element >= 0 &&  last_element < data.size());
    //                
    /*
                                                                                                                                                         
                   
    */
    int parent_index = 0;
    int first_child_index = 1;
    while ((data[parent_index] < data[first_child_index] || data[parent_index] < data[first_child_index + 1]) && first_child_index < last_element)
    {
        if (data[first_child_index] >= data[first_child_index + 1])
        {
            _swap(data, parent_index, first_child_index);
            parent_index = first_child_index;
        }
        else if (first_child_index + 1 < last_element)
        {
            _swap(data, parent_index, first_child_index + 1);
            parent_index = first_child_index + 1;
        }
        else
        {
            break;
        }
        first_child_index = 2 * parent_index + 1;
    }
}

void pick_heap(vector<int>& data)
{   //               
    assert(true);
    //                
    /*
                                                                                                                                                      
                                                   
    */
    for (int i = data.size() - 1; i > 1; i--)
    {
        _swap(data, 0, i);
        if (data[0] < data[1] || data[0] < data[2])
        {
            push_down(data, i);
        }
    }
    if (data[1] < data[0])
    {
        _swap(data, 0, 1);
    }
}

int main()
{
    vector<int>& data = int_vector;

    build_heap(data);
    if (check_heap(data))
    {
        cout << "\nHeap successfully created.";
    }
    //                                                                                 
    pick_heap(data);
    if (check_sorted(data))
    {
        cout << "\n\nData successfully sorted.";
    }
    display_vector(data, 0);
    cout << '\n';
}

/*
       
                                                
                                                         

       
                               

         
          
            
            
             

         
          
            
            
             

         
          
            
            
             

                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            

                                                    
                                                                                                                 
                                                                   
                                                                                                                 
                                                                   
                                                                              
                                                                               
*/

